questão 10:
Ao executar o código, haverá um erro de compilação, uma vez que "X" é um ponteiro para uma constante 
/////////
Questão 11:
#include <stdio.h>

int main() {
    // Endereço inicial do vetor x
    int endereco_inicial = 4092;

    // Tamanhos dos tipos de dados
    int tamanho_char = 1;
    int tamanho_int = 2;
    int tamanho_float = 4;
    int tamanho_double = 8;

    // Calculando os deslocamentos para cada tipo de dado
    int endereco_char = endereco_inicial + tamanho_char;
    int endereco_int = endereco_inicial + tamanho_int;
    int endereco_float = endereco_inicial + tamanho_float;
    int endereco_double = endereco_inicial + tamanho_double;

    // Imprimindo os resultados na tela
    printf("Endereço de x_char + 1: %d\n", endereco_char);
    printf("Endereço de x_int + 1: %d\n", endereco_int);
    printf("Endereço de x_float + 1: %d\n", endereco_float);
    printf("Endereço de x_double + 1: %d\n", endereco_double);
    printf("\n");

    printf("Endereço de x_char + 2: %d\n", endereco_char + tamanho_char);
    printf("Endereço de x_int + 2: %d\n", endereco_int + tamanho_int);
    printf("Endereço de x_float + 2: %d\n", endereco_float + tamanho_float);
    printf("Endereço de x_double + 2: %d\n", endereco_double + tamanho_double);
    printf("\n");

    printf("Endereço de x_char + 3: %d\n", endereco_char + 2 * tamanho_char);
    printf("Endereço de x_int + 3: %d\n", endereco_int + 2 * tamanho_int);
    printf("Endereço de x_float + 3: %d\n", endereco_float + 2 * tamanho_float);
    printf("Endereço de x_double + 3: %d\n", endereco_double + 2 * tamanho_double);
    printf("\n");

    return 0;
}

///////////
Questão 12:

Vamos analisar cada comando e determinar se é válido ou inválido:
1. aloha[2] = value;: Válido. Isso atribui o valor da variável value ao terceiro elemento do array aloha. Ambos aloha[2] e value são do tipo float.
2. scanf("%f", &aloha);: Inválido. A função scanf() espera um ponteiro para uma variável float para armazenar o valor digitado pelo usuário. No entanto, &aloha é um ponteiro para o primeiro elemento do array aloha, que é do tipo float *, não um único elemento do tipo float.
3. aloha = "value";: Inválido. Esta atribuição tenta atribuir uma string à matriz aloha, o que não é permitido. A matriz aloha é uma matriz de floats, não uma string.
4. printf("%f", aloha);: Inválido. %f é um especificador de formato para float, mas aloha é um array de floats, não um float individual. Você precisa especificar um elemento específico do array (por exemplo, aloha[0], aloha[1], etc.) para imprimir corretamente um valor float usando printf().
5. coisas[4][4] = aloha[3];: Válido. Isso atribui o valor do quarto elemento do array aloha ao elemento coisas[4][4]. Ambos aloha[3] e coisas[4][4] são do tipo float.
6. coisas[5] = aloha;: Inválido. Você não pode atribuir um array a outro array desta forma em C. coisas[5] é uma linha de uma matriz bidimensional, enquanto aloha é um array unidimensional de floats.
7. pf = value;: Inválido. pf é um ponteiro para float, e value é um float. Atribuir diretamente um float a um ponteiro para float é inválido. Você precisa atribuir o endereço de value a pf usando pf = &value;.
8. pf = aloha;: Válido. Isso atribui o endereço do primeiro elemento do array aloha ao ponteiro pf. Ambos pf e aloha são do tipo float *, então isso é válido.
/////////
Questão 13:
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    // malloc sem free
    int *ptr1 = (int *)malloc(sizeof(int));

    // loop com malloc sem free
    for (int i = 0; i < 5; i++) {
        int *ptr2 = (int *)malloc(sizeof(int));
    }

    // nullptr
    int *ptr3 = (int *)malloc(sizeof(int));
    ptr3 = NULL; 
    return 0;
}
Memory leak é um problema no qual um programa aloca memória dinamicamente, mas não libera a memória que não é mais utilizada gerando um baixo desepenho da máquina.
/////
Questão 14:
Ponteiro para uma função é um recurso que serve para definif, ou chamar, qual função será executada, sem a necessidade de escrever o nome da função, de forma explícita todas as vezes. 
exemplo:
#include <stdio.h>

  void troca(int a, int b){
    int tmp;
    printf("a = %d, b = %d\n", a, b);
    tmp = a; a = b; tmp = b;
    printf("a = %d, b = %d\n", a, b);
  }
int main(void){
  int x = 3, y = 4;
  printf("x = %d, y = %d\n", x, y);
  troca(x, y);
  printf("x = %d, y = %d\n", x, y);
  return 0;
}
////
Questão 15:
#include <stdio.h>
#include <stdlib.h> 

// Função de comparação
int compare(const void *p1, const void *p2) {
    float float_p1 = *((float *)p1);
    float float_p2 = *((float *)p2);
    if (float_p1 < float_p2) return -1;
    if (float_p1 > float_p2) return 1;
    return 0;
}

// Função para ordenar os floats
void ordenar_float(int X) {
    float *floats = (float *)malloc(X * sizeof(float));
    if (floats == NULL) {
        printf("Erro de alocação de memória para floats.\n");
        return;
    }

    printf("Digite os %d valores:\n", X);
    for (int i = 0; i < X; i++) {
        scanf("%f", &floats[i]);
    }

    // qsort
    qsort(floats, X, sizeof(float), compare);

    // Apresentação dos valores em ordem crescente
    printf("Floats em ordem crescente:\n"); 
    for (int i = 0; i < X; i++) {
        printf("%.2f ", floats[i]);
    }
    printf("\n");

    free(floats);
}

int main() {
    int X;
    printf("Digite a quantidade de valores: ");
    scanf("%d", &X);
    ordenar_float(X);
    return 0;
}
/////
Questão 16:
O código já se utiliza do qsort, então, irei explicar sua função nesse código. O qsort foi usado na linha "125" para a ordenação dos floats, explicando cada um: 
1 - "floats" - Meu ponteiro para um array
2 - "X" - É o número de elementos do array 
3 - "sizeof(float)" - indica o tamanho de cada elemento do array em bytes. Um float possui 4 bytes
4 - "Compare" - Função que serve de comparação, que irá imprimir "1" para valores válidos e "-1" para os inválidos.
//////
Questão 17:
Não soubemos fazer
//////
Questão 18:
Não swoubemos fazer
//////
Questão 19:
#include <stdio.h>

// Função para somar vetores e armazenar o resultado em um terceiro vetor
void soma_vetores(int *vet1, int *vet2, int *resultado, int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        resultado[i] = vet1[i] + vet2[i];
    }
}

int main() {
    int tamanho;

    // Solicita o tamanho dos vetores ao usuário
    printf("Digite o tamanho dos vetores: ");
    scanf("%d", &tamanho);

    // Declaração dos vetores
    int vet1[tamanho], vet2[tamanho], resultado[tamanho];

    // Solicita os elementos do primeiro vetor ao usuário
    printf("Digite os elementos do primeiro vetor:\n");
    for (int i = 0; i < tamanho; i++) {
        scanf("%d", &vet1[i]);
    }

    // Solicita os elementos do segundo vetor ao usuário
    printf("Digite os elementos do segundo vetor:\n");
    for (int i = 0; i < tamanho; i++) {
        scanf("%d", &vet2[i]);
    }

    // função soma_vetores para realizar a soma e armazenar o resultado
    soma_vetores(vet1, vet2, resultado, tamanho);

    // vetor resultado
    printf("Resultado da soma dos vetores:\n");
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", resultado[i]);
    }
    printf("\n");

    return 0;
}
/////
Questão 20:
Não Soubemos fazer
//////
Questão 21:
A - Não há vazamento de memória, pois a memória alocada é devidamente liberada, com o "malloc junto o free"
B - Não há vazamento de memória. Pois a função "F" declara um ponteiro para float de nome "a", Que não está sendo alocado nenhuma memória para ele.
C - Não há vazamento de memória, pois a memória alocada é devidamente liberada, com o "malloc junto o free"
D - Não há vazamento de memória, pois o ponteiro "num" recebe valor f(10), recebendo um valor alocado e depois ele é liberado com "free(num)".
E - Há vazamento, Os ponteiros "m" e "novo" são alocados dinamicamente. Em seguida, o ponteiro "m" é liberado, mas depois é ponteiro m é reatribuído para apontar para o mesmo bloco de memória apontado por novo. 
Então a memória é novamente liberada usando free(m). Nesse ponto, o bloco de memória alocado para novo é perdido, pois m e novo agora apontam para o mesmo bloco de memória.
//////
Questão 22:
#include <stdio.h>
int main(){
  int a, b;
  int x, y, z;
  scanf("%d %d", &a, &b);
  x = a; y = b; z = a + b;
  while (a) {
  x = x | b;
  y = y ^ a;
  z = z & (a+b);
  a = a >> 1;
  b = b << 1;
  }
  printf ("%d %d %d\n", x, y, z);
  return 0;
}
Resultado = Ao digitar os vaçores 10 e 1, o código imprime os valores 15, 13 e 0.
//////
Questão 23: 
#include <stdio.h>
#define TAM 10

int funcao1(int vetor[], int v){
  int i;
  for (i = 0; i < TAM; i++){
    if (vetor[i] == v)
      return i;
  }
  return -1;
}

int funcao2(int vetor[], int v, int i, int f){
  int m = (i + f) / 2;
  if (v == vetor[m])
    return m;
  if (i >= f)
    return -1;
  if (v > vetor[m])
    return funcao2(vetor, v, m + 1, f);
  else
    return funcao2(vetor, v, i, m - 1);
}

int main(){
  int vetor[TAM] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
  printf("%d - %d", funcao1(vetor, 15), funcao2(vetor, 15, 0, TAM - 1));
  return 0;
}
Resposta: Ao corrigir o código, vamos para as sentenças:
I. O resultado da impressão na linha 24 é: 7 - 7. --> Verdadeiro, ao executar o código esse é o resultado que irá sair.
II. A função funcao1, no pior caso, é uma estratégia mais rápida do que a funcao2. --> Verdadeiro, uma vez que passa por todos os elemebntos do vetor.
III. A função funcao2 implementa uma estratégia iterativa na concepção do algoritmo. --> Falso, pois ela não se utiliza de loops. 
Resultado: Apenas I e II estão corretas. 









